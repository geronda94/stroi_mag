from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType
from aiogram.filters import Filter, Command, Text
import asyncio
import logging #–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apg import db
from pg import orders


#–ë–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏#############################
TOKEN = '6052258880:AAEszm7mrAL74aIL76KnpLjihXng5f_vXSc'                      
ADMIN = '5774941154'                  
################################################

#–ë–ª–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π#########################
async def start_bot(bot: Bot): #—Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä —Å –±–æ—Ç–æ–º
    await bot.send_message(ADMIN, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
async def stop_bot(bot: Bot):
    await bot.send_message(ADMIN, text='<s>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</s>')
async def get_start(message: Message, bot: Bot): #–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —é–∑–µ—Ä –¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
    await message.answer('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!')
###############################################

async def job_function(bot: Bot):

    extract = orders.get_orders()
    #–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    if len(extract)> 0:
        for i in extract:
            #–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Ü–∏–∫–ª–µ
            order_id = str(i.get('id'))
     
            #–ò–∑–≤–ª–µ–∫–∞–µ–º–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–∫–∏ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            datetime = i.get('date_time')
            order_date = datetime.strftime('%d.%m') if datetime else None
            order_time = datetime.strftime('%H:%M') if datetime else None
            location = i.get('location')
            address = i.get('address')
            order_phone = i.get('phone')
            full_price = i.get('full_price')
            product_price = i.get('product_price')
            delivery_price = i.get('delivery_price')
            loaders_price = i.get('load_price')
            
            #–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ –∑–∞—è–≤–∫–∏
            order_info = f"<b>‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ ‚úÖ</b>\n\n\t–ó–∞–∫–∞–∑ <b>‚Ññ {order_id}</b>, \n\t<b>–æ—Ç {order_date} –≤ {order_time}</b>"
            
            #–ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞—è–≤–∫–∏
            products = orders.get_products(order_id)
            order_products = f"----------------------------\nüõí<b> –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ {order_id}</b>\n\n  "
            for prod in products:
                order_products += f"üì¶ <b>{prod.get('product_name')}</b> | {prod.get('coll')} —à—Ç. | {prod.get('price')} —Ä. –∑–∞ —à—Ç. | –°—É–º–º–∞: <b>{prod.get('total_price')} —Ä. </b>\n\n"
                #–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
            order_products += f"\t\t<b>–ò—Ç–æ–≥–æ –∑–∞ —Ç–æ–≤–∞—Ä: {product_price} —Ä.</b>"

            #–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞
            delivery_message = '----------------------------\nüöõ –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞'
            if float(delivery_price) > 0:
                delivery_items = orders.get_delivery(order_id=order_id)[0]
                if delivery_items and len(delivery_items) > 0:
                    d_name = delivery_items.get('delivery_name')
                    p_weight = delivery_items.get('products_weight')
                    max_weight = delivery_items.get('max_weight')
                    need_ride = delivery_items.get('need_ride')
                    d_price = delivery_items.get('delivery_price')
                    total_price = delivery_items.get('total_price')

                    delivery_message =  f"----------------------------\nüöõ –î–æ—Å—Ç–∞–≤–∫–∞ –∫ –∑–∞–∫–∞–∑—É <b>‚Ññ{order_id}</b> \n\n <b>{d_name}</b> \n " \
                                        f"–ü–æ –∞–¥—Ä–µ—Å—É: <b>{location}, {address}</b>\n\n"\
                                        f"–¢–æ–≤–∞—Ä –≤–µ—Å–∏—Ç: <b>{int(p_weight) / 1000} —Ç.</b>\n"\
                                        f"–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã: <b>{int(max_weight) / 1000} —Ç.</b>\n"\
                                        f"–ù—É–∂–Ω–æ —Ä–µ–π—Å–æ–≤: <b>{need_ride}</b>\n"\
                                        f"–¶–µ–Ω–∞ —Ä–µ–π—Å–∞: <b>{d_price} —Ä.</b>\n\n"\
                                        f"\t\t<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {total_price} —Ä.</b>\n"\
            
            loaders_message = '----------------------------\nüë∑‚Äç‚ôÇÔ∏è –ì—Ä—É–∑—á–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã '
            if float(loaders_price) > 0:
                loaders_items = orders.get_loaders(order_id=order_id)
                l_name = loaders_items[0].get('load_name')
                
                loaders_message = f"----------------------------\nüë∑‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∏ –≥—Ä—É–∑—á–∏–∫–æ–≤ –∫ –∑–∞–∫–∞–∑—É <b>‚Ññ{order_id}</b> \n\n <b>{l_name}</b> \n\n"
                for load in loaders_items:
                    l_weight = load.get('load_weight')
                    l_coll = load.get('coll')
                    l_price = load.get('price')
                    l_tprice = load.get('total_price')
                    loaders_message += f'‚ûï –í–µ—Å: <b>{l_weight} –∫–≥.</b> | {l_coll} —à—Ç. | –¶–µ–Ω–∞: {l_price} | –°—É–º–º–∞: <b>{l_tprice}</b>\n\n'
                
                loaders_message += f"\t\t<b>–ò—Ç–æ–≥–æ –∑–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É: {loaders_price} —Ä.</b>\n"\

            #orders.order_status(order_id=order_id, status='in process')
            finally_message = f"{order_info} \n\n\n{order_products} \n\n\n{delivery_message} \n\n\n{loaders_message} \n\n\n<b>–û–ë–©–ê–Ø –°–£–ú–ú–ê: {full_price} </b>"

            await bot.send_message(ADMIN, text=str(finally_message))
            await bot.send_message(ADMIN, text=str(f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: ‚òéÔ∏è\n\n "))
            await bot.send_message(ADMIN, text=f'{order_phone}')







#–¢–µ–ª–æ –±–æ—Ç–∞#####################################
async def start():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - [%(levelname)s] - %(name)s -(%(filename)s).%(funcName)s(%(lineno)d) - %(message)s")

    bot = Bot(token=TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.startup.register(start_bot) #–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    dp.shutdown.register(stop_bot)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(job_function, 'interval', seconds=10, args=(bot,))



    dp.message.register(get_start, Command(commands=['start'])) #–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start





    try:
        #–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
        scheduler.start()
        
        await dp.start_polling(bot)
    finally:
        #–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await bot.session.close()
###############################################


#–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–æ—Ç–∞########################
if __name__ == "__main__":
    asyncio.run(start())